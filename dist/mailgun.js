/*! For license information please see mailgun.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.mailgun=e():t.mailgun=e()}(this,(function(){return(()=>{var t={990:function(t,e,r){"use strict";var n=(this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}})(r(765)),o=function(){function t(t){this.formData=t}return t.prototype.client=function(t){return new n.default(t,this.formData)},t}();t.exports=o},765:function(t,e,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=o(r(955)),i=o(r(20)),u=o(r(944)),a=o(r(154)),h=o(r(526)),c=o(r(632)),p=o(r(616)),f=o(r(893)),l=o(r(335)),d=o(r(726)),y=o(r(580)),m=o(r(853)),v=o(r(611)),b=o(r(132)),_=function(t,e){var r=n({},t);if(r.url||(r.url="https://api.mailgun.net"),!r.username)throw new Error('Parameter "username" is required');if(!r.key)throw new Error('Parameter "key" is required');this.request=new s.default(r,e);var o=new b.default(this.request);this.domains=new i.default(this.request),this.webhooks=new c.default(this.request),this.events=new u.default(this.request),this.stats=new a.default(this.request),this.suppressions=new h.default(this.request),this.messages=new p.default(this.request),this.routes=new f.default(this.request),this.ips=new y.default(this.request),this.ip_pools=new m.default(this.request),this.lists=new v.default(this.request,o),r.public_key&&(r.key=r.public_key,this.public_request=new s.default(r,e),this.validate=new l.default(this.public_request),this.parse=new d.default(this.public_request))};e.default=_},20:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(r(989)),s=n(r(549)),i=function(t,e,r){this.name=t.name,this.require_tls=t.require_tls,this.skip_verification=t.skip_verification,this.state=t.state,this.wildcard=t.wildcard,this.spam_action=t.spam_action,this.created_at=t.created_at,this.smtp_password=t.smtp_password,this.smtp_login=t.smtp_login,this.type=t.type,this.receiving_dns_records=e||null,this.sending_dns_records=r||null},u=function(){function t(t){this.request=t}return t.prototype._parseMessage=function(t){return t.body},t.prototype._parseDomainList=function(t){return t.body.items.map((function(t){return new i(t)}))},t.prototype._parseDomain=function(t){return new i(t.body.domain,t.body.receiving_dns_records,t.body.sending_dns_records)},t.prototype._parseTrackingSettings=function(t){return t.body.tracking},t.prototype._parseTrackingUpdate=function(t){return t.body},t.prototype.list=function(t){var e=this;return this.request.get("/v2/domains",t).then((function(t){return e._parseDomainList(t)}))},t.prototype.get=function(t){var e=this;return this.request.get("/v2/domains/"+t).then((function(t){return e._parseDomain(t)}))},t.prototype.create=function(t){var e=this;return this.request.postWithFD("/v2/domains",t).then((function(t){return e._parseDomain(t)}))},t.prototype.destroy=function(t){var e=this;return this.request.delete("/v2/domains/"+t).then((function(t){return e._parseMessage(t)}))},t.prototype.getTracking=function(t){return this.request.get(o.default("/v2/domains",t,"tracking")).then(this._parseTrackingSettings)},t.prototype.updateTracking=function(t,e,r){if(!("html_footer"in r)&&!("text_footer"in r)&&"boolean"==typeof(null==r?void 0:r.active))throw new s.default({status:400,statusText:"",body:{message:'Value "active" must contain string value.'}});return this.request.putWithFD(o.default("/v2/domains",t,"tracking",e),r).then(this._parseTrackingUpdate)},t.prototype.getIps=function(t){return this.request.get(o.default("/v2/domains",t,"ips")).then((function(t){var e;return null===(e=null==t?void 0:t.body)||void 0===e?void 0:e.items}))},t.prototype.assignIp=function(t,e){return this.request.postWithFD(o.default("/v2/domains",t,"ips"),{ip:e})},t.prototype.deleteIp=function(t,e){return this.request.delete(o.default("/v2/domains",t,"ips",e))},t.prototype.linkIpPool=function(t,e){return this.request.postWithFD(o.default("/v2/domains",t,"ips"),{pool_id:e})},t.prototype.unlinkIpPoll=function(t,e,r){return this.request.delete(o.default("/v2/domains",t,"ips","ip_pool"),{pool_id:e,ip:r})},t}();e.default=u},549:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e){var r=e.status,n=e.statusText,o=e.message,s=e.body,i=void 0===s?{}:s,u=this,a=i.message,h=i.error;return(u=t.call(this)||this).stack="",u.status=r,u.message=o||h||n,u.details=a,u}return n(e,t),e}(Error);e.default=o},944:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(989),o=(r(955),function(){function t(t){this.request=t}return t.prototype._parsePageNumber=function(t){return t.split("/").pop()},t.prototype._parsePage=function(t,e){return{id:t,number:this._parsePageNumber(e),url:e}},t.prototype._parsePageLinks=function(t){var e=this;return Object.entries(t.body.paging).reduce((function(t,r){var n=r[0],o=r[1];return t[n]=e._parsePage(n,o),t}),{})},t.prototype._parseEventList=function(t){return{items:t.body.items,pages:this._parsePageLinks(t)}},t.prototype.get=function(t,e){var r,o=this;return e&&e.page?(r=n("/v2",t,"events",e.page),delete e.page):r=n("/v2",t,"events"),this.request.get(r,e).then((function(t){return o._parseEventList(t)}))},t}());e.default=o},853:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});r(955);var n=function(){function t(t){this.request=t}return t.prototype.list=function(t){var e=this;return this.request.get("/v1/ip_pools",t).then((function(t){return e.parseIpPoolsResponse(t)}))},t.prototype.create=function(t){return this.request.post("/v1/ip_pools",t).then((function(t){return null==t?void 0:t.body}))},t.prototype.update=function(t,e){return this.request.patch("/v1/ip_pools/"+t,e).then((function(t){return null==t?void 0:t.body}))},t.prototype.delete=function(t,e){return this.request.delete("/v1/ip_pools/"+t,e).then((function(t){return null==t?void 0:t.body}))},t.prototype.parseIpPoolsResponse=function(t){return t.body.ip_pools},t}();e.default=n},580:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});r(955);var n=function(){function t(t){this.request=t}return t.prototype.list=function(t){var e=this;return this.request.get("/v3/ips",t).then((function(t){return e.parseIpsResponse(t)}))},t.prototype.get=function(t){var e=this;return this.request.get("/v3/ips/"+t).then((function(t){return e.parseIpsResponse(t)}))},t.prototype.parseIpsResponse=function(t){return t.body},t}();e.default=n},611:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){this.request=t,this.baseRoute="/v3/lists",this.members=e}return t.prototype.list=function(t){return this.request.get(this.baseRoute+"/pages",t).then((function(t){return t.body.items}))},t.prototype.get=function(t){return this.request.get(this.baseRoute+"/"+t).then((function(t){return t.body.list}))},t.prototype.create=function(t){return this.request.postWithFD(this.baseRoute,t).then((function(t){return t.body.list}))},t.prototype.update=function(t,e){return this.request.putWithFD(this.baseRoute+"/"+t,e).then((function(t){return t.body.list}))},t.prototype.destroy=function(t){return this.request.delete(this.baseRoute+"/"+t).then((function(t){return t.body}))},t}();e.default=r},132:function(t,e){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.request=t,this.baseRoute="/v3/lists"}return t.prototype.checkAndUpdateData=function(t){var e=r({},t);return"object"==typeof t.vars&&(e.vars=JSON.stringify(e.vars)),"boolean"==typeof t.subscribed&&(e.subscribed=t.subscribed?"yes":"no"),e},t.prototype.listMembers=function(t,e){return this.request.get(this.baseRoute+"/"+t+"/members/pages",e).then((function(t){return t.body.items}))},t.prototype.getMember=function(t,e){return this.request.get(this.baseRoute+"/"+t+"/members/"+e).then((function(t){return t.body.member}))},t.prototype.createMember=function(t,e){var r=this.checkAndUpdateData(e);return this.request.postWithFD(this.baseRoute+"/"+t+"/members",r).then((function(t){return t.body.member}))},t.prototype.createMembers=function(t,e){var r={members:Array.isArray(e.members)?JSON.stringify(e.members):e.members,upsert:e.upsert};return this.request.postWithFD(this.baseRoute+"/"+t+"/members.json",r).then((function(t){return t.body}))},t.prototype.updateMember=function(t,e,r){var n=this.checkAndUpdateData(r);return this.request.putWithFD(this.baseRoute+"/"+t+"/members/"+e,n).then((function(t){return t.body.member}))},t.prototype.destroyMember=function(t,e){return this.request.delete(this.baseRoute+"/"+t+"/members/"+e).then((function(t){return t.body}))},t}();e.default=n},616:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.request=t}return t.prototype._parseResponse=function(t){return t.body?t.body:t},t.prototype.create=function(t,e){return e.message?this.request.postWithFD("/v3/"+t+"/messages.mime",e).then(this._parseResponse):this.request.postWithFD("/v3/"+t+"/messages",e).then(this._parseResponse)},t}();e.default=r},726:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.request=t}return t.prototype.get=function(t,e){var r={};return Array.isArray(t)&&(t=t.join(",")),r.addresses=t,e&&(r.syntax_only=!1),this.request.get("/v3/address/parse",r).then((function(t){return t.body}))},t}();e.default=r},955:function(t,e,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,s){function i(t){try{a(n.next(t))}catch(t){s(t)}}function u(t){try{a(n.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,u)}a((n=n.apply(t,e||[])).next())}))},s=this&&this.__generator||function(t,e){var r,n,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function u(s){return function(u){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&s[0]?n.return:s[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,s[1])).done)return o;switch(n=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,n=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],n=0}finally{r=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=i(r(71)),a=i(r(989)),h=i(r(640)),c=i(r(549)),p=function(t){return"object"==typeof t&&"function"==typeof t.pipe},f=function(){function t(t,e){this.username=t.username,this.key=t.key,this.url=t.url,this.timeout=t.timeout,this.headers=t.headers||{},this.formData=e}return t.prototype.request=function(t,e,r){return o(this,void 0,void 0,(function(){var o,i,f,l,d,y,m,v;return s(this,(function(s){switch(s.label){case 0:return o=n({},r),i=u.default.encode(this.username+":"+this.key),f=n(n({Authorization:"Basic "+i},this.headers),null==o?void 0:o.headers),null==o||delete o.headers,f["Content-Type"]||delete f["Content-Type"],l=n({},o),(null==o?void 0:o.query)&&Object.getOwnPropertyNames(null==o?void 0:o.query).length>0&&(l.searchParams=o.query,delete l.query),[4,h.default(a.default(this.url,e),n({method:t.toLocaleUpperCase(),headers:f,throwHttpErrors:!1,timeout:this.timeout},l))];case 1:return(null==(d=s.sent())?void 0:d.ok)?[3,6]:(null==d?void 0:d.body)&&p(d.body)?[4,(b=d.body,_=[],new Promise((function(t,e){b.on("data",(function(t){return _.push(t)})),b.on("error",e),b.on("end",(function(){return t(Buffer.concat(_).toString("utf8"))}))})))]:[3,3];case 2:return m=s.sent(),[3,5];case 3:return[4,null==d?void 0:d.json()];case 4:m=s.sent(),s.label=5;case 5:throw y=m,new c.default({status:null==d?void 0:d.status,statusText:null==d?void 0:d.statusText,body:{message:y}});case 6:return v={},[4,null==d?void 0:d.json()];case 7:return[2,(v.body=s.sent(),v.status=null==d?void 0:d.status,v)]}var b,_}))}))},t.prototype.query=function(t,e,r,o){return this.request(t,e,n({query:r},o))},t.prototype.command=function(t,e,r,o){return this.request(t,e,n({headers:{"Content-Type":"application/x-www-form-urlencoded"},body:r},o))},t.prototype.get=function(t,e,r){return this.query("get",t,e,r)},t.prototype.head=function(t,e,r){return this.query("head",t,e,r)},t.prototype.options=function(t,e,r){return this.query("options",t,e,r)},t.prototype.post=function(t,e,r){return this.command("post",t,e,r)},t.prototype.postWithFD=function(t,e){var r=this.createFormData(e);return this.command("post",t,r,{headers:{"Content-Type":null}})},t.prototype.putWithFD=function(t,e){var r=this.createFormData(e);return this.command("put",t,r,{headers:{"Content-Type":null}})},t.prototype.createFormData=function(t){var e=function(t,e,r){var o=p(e),s=o?e:e.data,i=function(t){if("object"!=typeof t||p(t))return{};var e=t.filename,r=t.contentType,o=t.knownLength;return n(n(n({},e?{filename:e}:{filename:"file"}),r&&{contentType:r}),o&&{knownLength:o})}(e);o?r.append(t,s,i):r.append(t,s,i.filename)};return Object.keys(t).filter((function(e){return t[e]})).reduce((function(r,n){if("attachment"===n||"inline"===n){var o=t[n];return Array.isArray(o)?o.forEach((function(t){e(n,t,r)})):e(n,o,r),r}return Array.isArray(t[n])?t[n].forEach((function(t){r.append(n,t)})):null!=t[n]&&r.append(n,t[n]),r}),new this.formData)},t.prototype.put=function(t,e,r){return this.command("put",t,e,r)},t.prototype.patch=function(t,e,r){return this.command("patch",t,e,r)},t.prototype.delete=function(t,e,r){return this.command("delete",t,e,r)},t}();e.default=f},893:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.request=t}return t.prototype.list=function(t){return this.request.get("/v3/routes",t).then((function(t){return t.body.items}))},t.prototype.get=function(t){return this.request.get("/v3/routes/"+t).then((function(t){return t.body.route}))},t.prototype.create=function(t){return this.request.postWithFD("/v3/routes",t).then((function(t){return t.body.route}))},t.prototype.update=function(t,e){return this.request.putWithFD("/v3/routes/"+t,e).then((function(t){return t.body}))},t.prototype.destroy=function(t){return this.request.delete("/v3/routes/"+t).then((function(t){return t.body}))},t}();e.default=r},154:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(r(989)),s=function(t){this.start=new Date(t.start),this.end=new Date(t.end),this.resolution=t.resolution,this.stats=t.stats.map((function(t){return t.time=new Date(t.time),t}))},i=function(){function t(t){this.request=t}return t.prototype._parseStats=function(t){return new s(t.body)},t.prototype.getDomain=function(t,e){return this.request.get(o.default("/v3",t,"stats/total"),e).then(this._parseStats)},t.prototype.getAccount=function(t){return this.request.get("/v3/stats/total",t).then(this._parseStats)},t}();e.default=i},526:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(r(747)),s=n(r(989)),i={headers:{"Content-Type":"application/json"}},u=function(t){this.type="bounces",this.address=t.address,this.code=+t.code,this.error=t.error,this.created_at=new Date(t.created_at)},a=function(t){this.type="complaints",this.address=t.address,this.created_at=new Date(t.created_at)},h=function(t){this.type="unsubscribes",this.address=t.address,this.tags=t.tags,this.created_at=new Date(t.created_at)},c=function(){function t(t){this.request=t,this.models={bounces:u,complaints:a,unsubscribes:h}}return t.prototype._parsePage=function(t,e){var r=o.default.parse(e,!0).query;return{id:t,page:r.page,address:r.address,url:e}},t.prototype._parsePageLinks=function(t){var e=this;return Object.entries(t.body.paging).reduce((function(t,r){var n=r[0],o=r[1];return t[n]=e._parsePage(n,o),t}),{})},t.prototype._parseList=function(t,e){var r={};return r.items=t.body.items.map((function(t){return new e(t)})),r.pages=this._parsePageLinks(t),r},t.prototype._parseItem=function(t,e){return new e(t.body)},t.prototype.list=function(t,e,r){var n=this,o=this.models[e];return this.request.get(s.default("v3",t,e),r).then((function(t){return n._parseList(t,o)}))},t.prototype.get=function(t,e,r){var n=this,o=this.models[e];return this.request.get(s.default("v3",t,e,encodeURIComponent(r))).then((function(t){return n._parseItem(t,o)}))},t.prototype.create=function(t,e,r){return Array.isArray(r)||(r=[r]),this.request.post(s.default("v3",t,e),r,i).then((function(t){return t.body}))},t.prototype.destroy=function(t,e,r){return this.request.delete(s.default("v3",t,e,encodeURIComponent(r))).then((function(t){return t.body}))},t}();e.default=c,t.exports=c},335:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.request=t}return t.prototype.get=function(t){return this.request.get("/v3/address/validate",{address:t}).then((function(t){return t.body}))},t}();e.default=r},632:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(r(989)),s=function(t,e){this.id=t,this.url=e},i=function(){function t(t){this.request=t}return t.prototype._parseWebhookList=function(t){return t.body.webhooks},t.prototype._parseWebhookWithID=function(t){return function(e){var r,n=null===(r=null==e?void 0:e.body)||void 0===r?void 0:r.webhook,o=null==n?void 0:n.url;return o||(o=(null==n?void 0:n.urls)&&n.urls.length?n.urls[0]:null),new s(t,o)}},t.prototype._parseWebhookTest=function(t){return{code:t.body.code,message:t.body.message}},t.prototype.list=function(t,e){return this.request.get(o.default("/v2/domains",t,"webhooks"),e).then(this._parseWebhookList)},t.prototype.get=function(t,e){return this.request.get(o.default("/v2/domains",t,"webhooks",e)).then(this._parseWebhookWithID(e))},t.prototype.create=function(t,e,r,n){return void 0===n&&(n=!1),n?this.request.putWithFD(o.default("/v2/domains",t,"webhooks",e,"test"),{url:r}).then(this._parseWebhookTest):this.request.postWithFD(o.default("/v2/domains",t,"webhooks"),{id:e,url:r}).then(this._parseWebhookWithID(e))},t.prototype.update=function(t,e,r){return this.request.putWithFD(o.default("/v2/domains",t,"webhooks",e),{url:r}).then(this._parseWebhookWithID(e))},t.prototype.destroy=function(t,e){return this.request.delete(o.default("/v2/domains",t,"webhooks",e)).then(this._parseWebhookWithID(e))},t}();e.default=i},71:function(t,e,r){var n;t=r.nmd(t),function(o){var s=e,i=(t&&t.exports,"object"==typeof r.g&&r.g);i.global!==i&&i.window;var u=function(t){this.message=t};(u.prototype=new Error).name="InvalidCharacterError";var a=function(t){throw new u(t)},h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",c=/[\t\n\f\r ]/g,p={encode:function(t){t=String(t),/[^\0-\xFF]/.test(t)&&a("The string to be encoded contains characters outside of the Latin1 range.");for(var e,r,n,o,s=t.length%3,i="",u=-1,c=t.length-s;++u<c;)e=t.charCodeAt(u)<<16,r=t.charCodeAt(++u)<<8,n=t.charCodeAt(++u),i+=h.charAt((o=e+r+n)>>18&63)+h.charAt(o>>12&63)+h.charAt(o>>6&63)+h.charAt(63&o);return 2==s?(e=t.charCodeAt(u)<<8,r=t.charCodeAt(++u),i+=h.charAt((o=e+r)>>10)+h.charAt(o>>4&63)+h.charAt(o<<2&63)+"="):1==s&&(o=t.charCodeAt(u),i+=h.charAt(o>>2)+h.charAt(o<<4&63)+"=="),i},decode:function(t){var e=(t=String(t).replace(c,"")).length;e%4==0&&(e=(t=t.replace(/==?$/,"")).length),(e%4==1||/[^+a-zA-Z0-9/]/.test(t))&&a("Invalid character: the string to be decoded is not correctly encoded.");for(var r,n,o=0,s="",i=-1;++i<e;)n=h.indexOf(t.charAt(i)),r=o%4?64*r+n:n,o++%4&&(s+=String.fromCharCode(255&r>>(-2*o&6)));return s},version:"1.0.0"};void 0===(n=function(){return p}.call(e,r,e,t))||(t.exports=n)}()},640:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=r(14);Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n(o).default}})},14:function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=this&&this.__assign||function(){return(s=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},i=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,s){function i(t){try{a(n.next(t))}catch(t){s(t)}}function u(t){try{a(n.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,u)}a((n=n.apply(t,e||[])).next())}))},u=this&&this.__generator||function(t,e){var r,n,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function u(s){return function(u){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&s[0]?n.return:s[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,s[1])).done)return o;switch(n=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,n=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],n=0}finally{r=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}},a=this&&this.__spreadArray||function(t,e){for(var r=0,n=e.length,o=t.length;r<n;r++,o++)t[o]=e[r];return t};Object.defineProperty(e,"__esModule",{value:!0});for(var h={},c=function(t){Object.defineProperty(h,t,{get:function(){var e=function(t){return"undefined"!=typeof self&&self&&t in self?self:"undefined"!=typeof window&&window&&t in window?window:void 0!==r.g&&r.g&&t in r.g?r.g:"undefined"!=typeof globalThis&&globalThis?globalThis:void 0}(t),n=e&&e[t];return"function"==typeof n?n.bind(e):n}})},p=0,f=["Headers","Request","Response","ReadableStream","fetch","AbortController","FormData"];p<f.length;p++){c(f[p])}var l=function(t){return null!==t&&"object"==typeof t},d="function"==typeof h.AbortController,y="function"==typeof h.ReadableStream,m="function"==typeof h.FormData,v=function(t,e){for(var r=new h.Headers(t||{}),n=e instanceof h.Headers,o=0,s=new h.Headers(e||{});o<s.length;o++){var i=s[o],u=i[0],a=i[1];n&&"undefined"===a||void 0===a?r.delete(u):r.set(u,a)}return r},b=function(){for(var t,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];for(var n={},o={},i=0,u=e;i<u.length;i++){var h=u[i];if(Array.isArray(h))Array.isArray(n)||(n=[]),n=a(a([],n),h);else if(l(h)){for(var c=0,p=Object.entries(h);c<p.length;c++){var f=p[c],d=f[0],y=f[1];l(y)&&d in n&&(y=b(n[d],y)),n=s(s({},n),((t={})[d]=y,t))}l(h.headers)&&(o=v(o,h.headers))}n.headers=o}return n},_=["get","post","put","patch","head","delete"],g={json:"application/json",text:"text/*",formData:"multipart/form-data",arrayBuffer:"*/*",blob:"*/*"},w=[413,429,503],q=Symbol("stop"),j=function(t){function e(e){var r=t.call(this,e.statusText||String(0===e.status||e.status?e.status:"Unknown response error"))||this;return r.name="HTTPError",r.response=e,r}return o(e,t),e}(Error),O=function(t){function e(e){var r=t.call(this,"Request timed out")||this;return r.name="TimeoutError",r.request=e,r}return o(e,t),e}(Error),x=function(t){return new Promise((function(e){return setTimeout(e,t)}))},A=function(t){return _.includes(t)?t.toUpperCase():t},k={limit:2,methods:["get","put","head","delete","options","trace"],statusCodes:[408,413,429,500,502,503,504],afterStatusCodes:w},R=function(t){if(void 0===t&&(t={}),"number"==typeof t)return s(s({},k),{limit:t});if(t.methods&&!Array.isArray(t.methods))throw new Error("retry.methods must be an array");if(t.statusCodes&&!Array.isArray(t.statusCodes))throw new Error("retry.statusCodes must be an array");return s(s(s({},k),t),{afterStatusCodes:w})},C=2147483647,D=function(){function t(t,e){var r=this;if(void 0===e&&(e={}),this._retryCount=0,this._input=t,this._options=s(s({credentials:this._input.credentials||"same-origin"},e),{headers:v(this._input.headers,e.headers),hooks:b({beforeRequest:[],beforeRetry:[],afterResponse:[]},e.hooks),method:A(e.method||this._input.method),prefixUrl:String(e.prefixUrl||""),retry:R(e.retry),throwHttpErrors:!1!==e.throwHttpErrors,timeout:void 0===e.timeout?1e4:e.timeout,fetch:e.fetch||h.fetch}),"string"!=typeof this._input&&!(this._input instanceof URL||this._input instanceof h.Request))throw new TypeError("`input` must be a string, URL, or Request");if(this._options.prefixUrl&&"string"==typeof this._input){if(this._input.startsWith("/"))throw new Error("`input` must not begin with a slash when using `prefixUrl`");this._options.prefixUrl.endsWith("/")||(this._options.prefixUrl+="/"),this._input=this._options.prefixUrl+this._input}if(d&&(this.abortController=new h.AbortController,this._options.signal&&this._options.signal.addEventListener("abort",(function(){r.abortController.abort()})),this._options.signal=this.abortController.signal),this.request=new h.Request(this._input,this._options),this._options.searchParams){var n="?"+new URLSearchParams(this._options.searchParams).toString(),o=this.request.url.replace(/(?:\?.*?)?(?=#|$)/,n);!(m&&this._options.body instanceof h.FormData||this._options.body instanceof URLSearchParams)||this._options.headers&&this._options.headers["content-type"]||this.request.headers.delete("content-type"),this.request=new h.Request(new h.Request(o,this.request),this._options)}void 0!==this._options.json&&(this._options.body=JSON.stringify(this._options.json),this.request.headers.set("content-type","application/json"),this.request=new h.Request(this.request,{body:this._options.body}));for(var a=function(){return i(r,void 0,void 0,(function(){var t,e,r,n;return u(this,(function(o){switch(o.label){case 0:if(this._options.timeout>C)throw new RangeError("The `timeout` option cannot be greater than 2147483647");return[4,x(1)];case 1:return o.sent(),[4,this._fetch()];case 2:t=o.sent(),e=0,r=this._options.hooks.afterResponse,o.label=3;case 3:return e<r.length?[4,(0,r[e])(this.request,this._options,this._decorateResponse(t.clone()))]:[3,6];case 4:(n=o.sent())instanceof h.Response&&(t=n),o.label=5;case 5:return e++,[3,3];case 6:if(this._decorateResponse(t),!t.ok&&this._options.throwHttpErrors)throw new j(t);if(this._options.onDownloadProgress){if("function"!=typeof this._options.onDownloadProgress)throw new TypeError("The `onDownloadProgress` option must be a function");if(!y)throw new Error("Streams are not supported in your environment. `ReadableStream` is missing.");return[2,this._stream(t.clone(),this._options.onDownloadProgress)]}return[2,t]}}))}))},c=this._options.retry.methods.includes(this.request.method.toLowerCase())?this._retry(a):a(),p=function(t,n){c[t]=function(){return i(r,void 0,void 0,(function(){var r,o,s;return u(this,(function(i){switch(i.label){case 0:return this.request.headers.set("accept",this.request.headers.get("accept")||n),[4,c];case 1:return r=i.sent().clone(),"json"!==t?[3,3]:204===r.status?[2,""]:e.parseJson?(s=(o=e).parseJson,[4,r.text()]):[3,3];case 2:return[2,s.apply(o,[i.sent()])];case 3:return[2,r[t]()]}}))}))}},f=0,l=Object.entries(g);f<l.length;f++){var _=l[f];p(_[0],_[1])}return c}return t.prototype._calculateRetryDelay=function(t){if(this._retryCount++,this._retryCount<this._options.retry.limit&&!(t instanceof O)){if(t instanceof j){if(!this._options.retry.statusCodes.includes(t.response.status))return 0;var e=t.response.headers.get("Retry-After");if(e&&this._options.retry.afterStatusCodes.includes(t.response.status)){var r=Number(e);return Number.isNaN(r)?r=Date.parse(e)-Date.now():r*=1e3,void 0!==this._options.retry.maxRetryAfter&&r>this._options.retry.maxRetryAfter?0:r}if(413===t.response.status)return 0}return.3*Math.pow(2,this._retryCount-1)*1e3}return 0},t.prototype._decorateResponse=function(t){var e=this;return this._options.parseJson&&(t.json=function(){return i(e,void 0,void 0,(function(){var e,r;return u(this,(function(n){switch(n.label){case 0:return r=(e=this._options).parseJson,[4,t.text()];case 1:return[2,r.apply(e,[n.sent()])]}}))}))}),t},t.prototype._retry=function(t){return i(this,void 0,void 0,(function(){var e,r,n,o;return u(this,(function(s){switch(s.label){case 0:return s.trys.push([0,2,,9]),[4,t()];case 1:return[2,s.sent()];case 2:return e=s.sent(),0!==(r=Math.min(this._calculateRetryDelay(e),C))&&this._retryCount>0?[4,x(r)]:[3,8];case 3:s.sent(),n=0,o=this._options.hooks.beforeRetry,s.label=4;case 4:return n<o.length?[4,(0,o[n])({request:this.request,options:this._options,error:e,retryCount:this._retryCount})]:[3,7];case 5:if(s.sent()===q)return[2];s.label=6;case 6:return n++,[3,4];case 7:return[2,this._retry(t)];case 8:if(this._options.throwHttpErrors)throw e;return[3,9];case 9:return[2]}}))}))},t.prototype._fetch=function(){return i(this,void 0,void 0,(function(){var t,e,r;return u(this,(function(n){switch(n.label){case 0:t=0,e=this._options.hooks.beforeRequest,n.label=1;case 1:return t<e.length?[4,(0,e[t])(this.request,this._options)]:[3,4];case 2:if((r=n.sent())instanceof Request)return this.request=r,[3,4];if(r instanceof Response)return[2,r];n.label=3;case 3:return t++,[3,1];case 4:return!1===this._options.timeout?[2,this._options.fetch(this.request.clone())]:[2,(o=this.request.clone(),s=this.abortController,i=this._options,new Promise((function(t,e){var r=setTimeout((function(){s&&s.abort(),e(new O(o))}),i.timeout);i.fetch(o).then(t).catch(e).then((function(){clearTimeout(r)}))})))]}var o,s,i}))}))},t.prototype._stream=function(t,e){var r=Number(t.headers.get("content-length"))||0,n=0;return new h.Response(new h.ReadableStream({start:function(o){var s=t.body.getReader();e&&e({percent:0,transferredBytes:0,totalBytes:r},new Uint8Array),function t(){return i(this,void 0,void 0,(function(){var i,a,h;return u(this,(function(u){switch(u.label){case 0:return[4,s.read()];case 1:return i=u.sent(),a=i.done,h=i.value,a?(o.close(),[2]):(e&&(n+=h.byteLength,e({percent:0===r?0:n/r,transferredBytes:n,totalBytes:r},h)),o.enqueue(h),t(),[2])}}))}))}()}}))},t}(),P=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=0,n=t;r<n.length;r++){var o=n[r];if((!l(o)||Array.isArray(o))&&void 0!==o)throw new TypeError("The `options` argument must be an object")}return b.apply(void 0,a([{}],t))},T=function(t){for(var e=function(e,r){return new D(e,P(t,r))},r=function(r){e[r]=function(e,n){return new D(e,P(t,n,{method:r}))}},n=0,o=_;n<o.length;n++){r(o[n])}return e.HTTPError=j,e.TimeoutError=O,e.create=function(t){return T(P(t))},e.extend=function(e){return T(P(t,e))},e.stop=q,e};e.default=T()},66:function(t,e,r){var n;t=r.nmd(t),function(o){e&&e.nodeType,t&&t.nodeType;var s="object"==typeof r.g&&r.g;s.global!==s&&s.window!==s&&s.self;var i,u=2147483647,a=36,h=/^xn--/,c=/[^\x20-\x7E]/,p=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},l=Math.floor,d=String.fromCharCode;function y(t){throw RangeError(f[t])}function m(t,e){for(var r=t.length,n=[];r--;)n[r]=e(t[r]);return n}function v(t,e){var r=t.split("@"),n="";return r.length>1&&(n=r[0]+"@",t=r[1]),n+m((t=t.replace(p,".")).split("."),e).join(".")}function b(t){for(var e,r,n=[],o=0,s=t.length;o<s;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<s?56320==(64512&(r=t.charCodeAt(o++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),o--):n.push(e);return n}function _(t){return m(t,(function(t){var e="";return t>65535&&(e+=d((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=d(t)})).join("")}function g(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function w(t,e,r){var n=0;for(t=r?l(t/700):t>>1,t+=l(t/e);t>455;n+=a)t=l(t/35);return l(n+36*t/(t+38))}function q(t){var e,r,n,o,s,i,h,c,p,f,d,m=[],v=t.length,b=0,g=128,q=72;for((r=t.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)t.charCodeAt(n)>=128&&y("not-basic"),m.push(t.charCodeAt(n));for(o=r>0?r+1:0;o<v;){for(s=b,i=1,h=a;o>=v&&y("invalid-input"),((c=(d=t.charCodeAt(o++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:a)>=a||c>l((u-b)/i))&&y("overflow"),b+=c*i,!(c<(p=h<=q?1:h>=q+26?26:h-q));h+=a)i>l(u/(f=a-p))&&y("overflow"),i*=f;q=w(b-s,e=m.length+1,0==s),l(b/e)>u-g&&y("overflow"),g+=l(b/e),b%=e,m.splice(b++,0,g)}return _(m)}function j(t){var e,r,n,o,s,i,h,c,p,f,m,v,_,q,j,O=[];for(v=(t=b(t)).length,e=128,r=0,s=72,i=0;i<v;++i)(m=t[i])<128&&O.push(d(m));for(n=o=O.length,o&&O.push("-");n<v;){for(h=u,i=0;i<v;++i)(m=t[i])>=e&&m<h&&(h=m);for(h-e>l((u-r)/(_=n+1))&&y("overflow"),r+=(h-e)*_,e=h,i=0;i<v;++i)if((m=t[i])<e&&++r>u&&y("overflow"),m==e){for(c=r,p=a;!(c<(f=p<=s?1:p>=s+26?26:p-s));p+=a)j=c-f,q=a-f,O.push(d(g(f+j%q,0))),c=l(j/q);O.push(d(g(c,0))),s=w(r,_,n==o),r=0,++n}++r,++e}return O.join("")}i={version:"1.3.2",ucs2:{decode:b,encode:_},decode:q,encode:j,toASCII:function(t){return v(t,(function(t){return c.test(t)?"xn--"+j(t):t}))},toUnicode:function(t){return v(t,(function(t){return h.test(t)?q(t.slice(4).toLowerCase()):t}))}},void 0===(n=function(){return i}.call(e,r,e,t))||(t.exports=n)}()},144:t=>{"use strict";function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,r,n,o){r=r||"&",n=n||"=";var s={};if("string"!=typeof t||0===t.length)return s;var i=/\+/g;t=t.split(r);var u=1e3;o&&"number"==typeof o.maxKeys&&(u=o.maxKeys);var a=t.length;u>0&&a>u&&(a=u);for(var h=0;h<a;++h){var c,p,f,l,d=t[h].replace(i,"%20"),y=d.indexOf(n);y>=0?(c=d.substr(0,y),p=d.substr(y+1)):(c=d,p=""),f=decodeURIComponent(c),l=decodeURIComponent(p),e(s,f)?Array.isArray(s[f])?s[f].push(l):s[f]=[s[f],l]:s[f]=l}return s}},284:t=>{"use strict";var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,r,n,o){return r=r||"&",n=n||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(o){var s=encodeURIComponent(e(o))+n;return Array.isArray(t[o])?t[o].map((function(t){return s+encodeURIComponent(e(t))})).join(r):s+encodeURIComponent(e(t[o]))})).join(r):o?encodeURIComponent(e(o))+n+encodeURIComponent(e(t)):""}},863:(t,e,r)=>{"use strict";e.decode=e.parse=r(144),e.encode=e.stringify=r(284)},989:t=>{function e(t){return t.replace(/[\/]+/g,"/").replace(/\/\?/g,"?").replace(/\/\#/g,"#").replace(/\:\//g,"://")}t.exports=function(){var t=[].slice.call(arguments,0).join("/");return e(t)}},747:(t,e,r)=>{"use strict";var n=r(66),o=r(15);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=_,e.resolve=function(t,e){return _(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?_(t,!1,!0).resolveObject(e):e},e.format=function(t){o.isString(t)&&(t=_(t));return t instanceof s?t.format():s.prototype.format.call(t)},e.Url=s;var i=/^([a-z0-9.+-]+:)/i,u=/:[0-9]*$/,a=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,h=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(h),p=["%","/","?",";","#"].concat(c),f=["/","?","#"],l=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,y={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=r(863);function _(t,e,r){if(t&&o.isObject(t)&&t instanceof s)return t;var n=new s;return n.parse(t,e,r),n}s.prototype.parse=function(t,e,r){if(!o.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var s=t.indexOf("?"),u=-1!==s&&s<t.indexOf("#")?"?":"#",h=t.split(u);h[0]=h[0].replace(/\\/g,"/");var _=t=h.join(u);if(_=_.trim(),!r&&1===t.split("#").length){var g=a.exec(_);if(g)return this.path=_,this.href=_,this.pathname=g[1],g[2]?(this.search=g[2],this.query=e?b.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=i.exec(_);if(w){var q=(w=w[0]).toLowerCase();this.protocol=q,_=_.substr(w.length)}if(r||w||_.match(/^\/\/[^@\/]+@[^@\/]+/)){var j="//"===_.substr(0,2);!j||w&&m[w]||(_=_.substr(2),this.slashes=!0)}if(!m[w]&&(j||w&&!v[w])){for(var O,x,A=-1,k=0;k<f.length;k++){-1!==(R=_.indexOf(f[k]))&&(-1===A||R<A)&&(A=R)}-1!==(x=-1===A?_.lastIndexOf("@"):_.lastIndexOf("@",A))&&(O=_.slice(0,x),_=_.slice(x+1),this.auth=decodeURIComponent(O)),A=-1;for(k=0;k<p.length;k++){var R;-1!==(R=_.indexOf(p[k]))&&(-1===A||R<A)&&(A=R)}-1===A&&(A=_.length),this.host=_.slice(0,A),_=_.slice(A),this.parseHost(),this.hostname=this.hostname||"";var C="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!C)for(var D=this.hostname.split(/\./),P=(k=0,D.length);k<P;k++){var T=D[k];if(T&&!T.match(l)){for(var I="",S=0,E=T.length;S<E;S++)T.charCodeAt(S)>127?I+="x":I+=T[S];if(!I.match(l)){var M=D.slice(0,k),U=D.slice(k+1),W=T.match(d);W&&(M.push(W[1]),U.unshift(W[2])),U.length&&(_="/"+U.join(".")+_),this.hostname=M.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),C||(this.hostname=n.toASCII(this.hostname));var F=this.port?":"+this.port:"",L=this.hostname||"";this.host=L+F,this.href+=this.host,C&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==_[0]&&(_="/"+_))}if(!y[q])for(k=0,P=c.length;k<P;k++){var N=c[k];if(-1!==_.indexOf(N)){var H=encodeURIComponent(N);H===N&&(H=escape(N)),_=_.split(N).join(H)}}var B=_.indexOf("#");-1!==B&&(this.hash=_.substr(B),_=_.slice(0,B));var J=_.indexOf("?");if(-1!==J?(this.search=_.substr(J),this.query=_.substr(J+1),e&&(this.query=b.parse(this.query)),_=_.slice(0,J)):e&&(this.search="",this.query={}),_&&(this.pathname=_),v[q]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){F=this.pathname||"";var z=this.search||"";this.path=F+z}return this.href=this.format(),this},s.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",r=this.pathname||"",n=this.hash||"",s=!1,i="";this.host?s=t+this.host:this.hostname&&(s=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&o.isObject(this.query)&&Object.keys(this.query).length&&(i=b.stringify(this.query));var u=this.search||i&&"?"+i||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||v[e])&&!1!==s?(s="//"+(s||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):s||(s=""),n&&"#"!==n.charAt(0)&&(n="#"+n),u&&"?"!==u.charAt(0)&&(u="?"+u),e+s+(r=r.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(u=u.replace("#","%23"))+n},s.prototype.resolve=function(t){return this.resolveObject(_(t,!1,!0)).format()},s.prototype.resolveObject=function(t){if(o.isString(t)){var e=new s;e.parse(t,!1,!0),t=e}for(var r=new s,n=Object.keys(this),i=0;i<n.length;i++){var u=n[i];r[u]=this[u]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var a=Object.keys(t),h=0;h<a.length;h++){var c=a[h];"protocol"!==c&&(r[c]=t[c])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!v[t.protocol]){for(var p=Object.keys(t),f=0;f<p.length;f++){var l=p[f];r[l]=t[l]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||m[t.protocol])r.pathname=t.pathname;else{for(var d=(t.pathname||"").split("/");d.length&&!(t.host=d.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),r.pathname=d.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var y=r.pathname||"",b=r.search||"";r.path=y+b}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var _=r.pathname&&"/"===r.pathname.charAt(0),g=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=g||_||r.host&&t.pathname,q=w,j=r.pathname&&r.pathname.split("/")||[],O=(d=t.pathname&&t.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(O&&(r.hostname="",r.port=null,r.host&&(""===j[0]?j[0]=r.host:j.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===d[0]?d[0]=t.host:d.unshift(t.host)),t.host=null),w=w&&(""===d[0]||""===j[0])),g)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,j=d;else if(d.length)j||(j=[]),j.pop(),j=j.concat(d),r.search=t.search,r.query=t.query;else if(!o.isNullOrUndefined(t.search)){if(O)r.hostname=r.host=j.shift(),(C=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=C.shift(),r.host=r.hostname=C.shift());return r.search=t.search,r.query=t.query,o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!j.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var x=j.slice(-1)[0],A=(r.host||t.host||j.length>1)&&("."===x||".."===x)||""===x,k=0,R=j.length;R>=0;R--)"."===(x=j[R])?j.splice(R,1):".."===x?(j.splice(R,1),k++):k&&(j.splice(R,1),k--);if(!w&&!q)for(;k--;k)j.unshift("..");!w||""===j[0]||j[0]&&"/"===j[0].charAt(0)||j.unshift(""),A&&"/"!==j.join("/").substr(-1)&&j.push("");var C,D=""===j[0]||j[0]&&"/"===j[0].charAt(0);O&&(r.hostname=r.host=D?"":j.length?j.shift():"",(C=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=C.shift(),r.host=r.hostname=C.shift()));return(w=w||r.host&&j.length)&&!D&&j.unshift(""),j.length?r.pathname=j.join("/"):(r.pathname=null,r.path=null),o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},s.prototype.parseHost=function(){var t=this.host,e=u.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},15:t=>{"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(s.exports,s,s.exports,r),s.loaded=!0,s.exports}return r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),r(990)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,